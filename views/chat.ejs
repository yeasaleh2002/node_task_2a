<div class="container mx-auto p-4">
  <div class="grid grid-cols-4 gap-4 h-[calc(100vh-2rem)]">
    <!-- Users Sidebar -->
    <div class="col-span-1 bg-white shadow rounded-lg overflow-hidden">
      <div class="p-4 bg-gray-50 border-b">
        <h2 class="text-xl font-bold">Contacts</h2>
        <p class="text-sm text-gray-600">Your ID: <span id="current-user-id" class="font-mono"></span></p>
        <button id="new-chat-btn" class="mt-2 w-full bg-blue-500 text-white px-4 py-2 rounded-lg hover:bg-blue-600 transition-colors">
          New Chat
        </button>
      </div>
      <div class="overflow-y-auto h-[calc(100vh-10rem)]">
        <ul id="users-list" class="divide-y"></ul>
      </div>
    </div>

    <!-- Main Chat Area -->
    <div class="col-span-3 bg-white shadow rounded-lg overflow-hidden flex flex-col">
      <!-- New Chat Form -->
      <div id="new-chat-form" class="p-4 bg-gray-50 border-b hidden">
        <h2 class="text-xl font-bold mb-4">Start New Chat</h2>
        <div class="flex gap-2">
          <input type="text" id="new-user-id" placeholder="Enter user ID to chat with..." 
            class="flex-1 border rounded-lg px-4 py-2 focus:outline-none focus:border-blue-500">
          <button id="start-chat-btn" 
            class="bg-blue-500 text-white px-6 py-2 rounded-lg hover:bg-blue-600 transition-colors">
            Start Chat
          </button>
        </div>
      </div>

      <!-- Chat Header -->
      <div id="chat-header" class="p-4 bg-gray-50 border-b">
        <h2 class="text-xl font-bold">Select a contact or start a new chat</h2>
      </div>

      <!-- Messages Area -->
      <div id="chat-log" class="flex-1 p-4 overflow-y-auto space-y-4 bg-gray-50"></div>

      <!-- Message Input -->
      <div id="message-input-container" class="p-4 border-t bg-white hidden">
        <div class="flex gap-2">
          <input id="message-input" type="text" placeholder="Type your message..." 
            class="flex-1 border rounded-full px-4 py-2 focus:outline-none focus:border-blue-500">
          <button id="send-button" 
            class="bg-blue-500 text-white px-6 py-2 rounded-full hover:bg-blue-600 transition-colors">
            Send
          </button>
        </div>
      </div>
    </div>
  </div>
</div>

<%- contentFor('style') %>
<script src="https://cdn.tailwindcss.com"></script>
<style>
  @keyframes pulse {
    0% { transform: scale(1); }
    50% { transform: scale(1.05); }
    100% { transform: scale(1); }
  }
  .notification-pulse {
    animation: pulse 1s infinite;
  }
</style>

<%- contentFor('script') %>
<script>
  // Generate and store user ID if not exists
  if (!localStorage.getItem('userId')) {
    localStorage.setItem('userId', 'user_' + Math.random().toString(36).substr(2, 9));
  }
  const currentUserId = localStorage.getItem('userId');
  document.getElementById('current-user-id').textContent = currentUserId;

  // Get DOM elements
  const usersList = document.getElementById('users-list');
  const chatLog = document.getElementById('chat-log');
  const chatHeader = document.getElementById('chat-header');
  const messageInput = document.getElementById('message-input');
  const sendButton = document.getElementById('send-button');
  const messageInputContainer = document.getElementById('message-input-container');
  const newChatBtn = document.getElementById('new-chat-btn');
  const newChatForm = document.getElementById('new-chat-form');
  const newUserIdInput = document.getElementById('new-user-id');
  const startChatBtn = document.getElementById('start-chat-btn');

  let selectedUserId = null;
  let polling = null;
  let messagePolling = null;
  const unreadMessages = new Map();

  // Chat functionality
  function getChatHistory() {
    const history = localStorage.getItem('chatHistory');
    return history ? JSON.parse(history) : {};
  }

  function saveChatHistory(userId, messages) {
    const history = getChatHistory();
    history[userId] = messages;
    localStorage.setItem('chatHistory', JSON.stringify(history));
  }

  async function loadUsers() {
    try {
      const response = await fetch('/api/chat/users');
      const users = await response.json();
      usersList.innerHTML = '';
      users.forEach(user => {
        if (user.id !== currentUserId) {
          addUserToList(user.id, user.name, user.lastSeen);
        }
      });
    } catch (error) {
      console.error('Error loading users:', error);
    }
  }

  function addUserToList(userId, userName, lastSeen, hasUnread = false) {
    const li = document.createElement('li');
    li.className = 'p-4 hover:bg-gray-50 cursor-pointer transition-colors';
    if (hasUnread) li.classList.add('bg-blue-50');
    
    li.innerHTML = `
      <div class="flex items-center gap-4">
        <div class="flex-1">
          <h3 class="font-semibold ${hasUnread ? 'text-blue-600' : ''}">${userName || userId}</h3>
          <p class="text-sm text-gray-500">${formatLastSeen(lastSeen)}</p>
        </div>
        ${hasUnread ? '<span class="w-3 h-3 bg-blue-500 rounded-full notification-pulse"></span>' : ''}
      </div>
    `;
    
    li.addEventListener('click', () => selectUser(userId, userName));
    usersList.appendChild(li);
  }

  function formatLastSeen(timestamp) {
    if (!timestamp) return 'Never';
    const date = new Date(timestamp);
    const now = new Date();
    const diff = Math.floor((now - date) / 1000);
    
    if (diff < 60) return 'Just now';
    if (diff < 3600) return `${Math.floor(diff / 60)}m ago`;
    if (diff < 86400) return `${Math.floor(diff / 3600)}h ago`;
    return date.toLocaleDateString();
  }

  function selectUser(userId, userName) {
    selectedUserId = userId;
    chatHeader.innerHTML = `<h2 class="text-xl font-bold">Chat with ${userName || userId}</h2>`;
    messageInputContainer.classList.remove('hidden');
    newChatForm.classList.add('hidden');
    loadChatHistory();
    unreadMessages.delete(userId);
  }

  function loadChatHistory() {
    const history = getChatHistory();
    const messages = history[selectedUserId] || [];
    displayMessages(messages);
  }

  function displayMessages(messages) {
    chatLog.innerHTML = '';
    messages.forEach(msg => {
      const messageDiv = document.createElement('div');
      const isOwn = msg.sender === currentUserId;
      
      messageDiv.className = `flex ${isOwn ? 'justify-end' : 'justify-start'}`;
      messageDiv.innerHTML = `
        <div class="max-w-[70%] ${isOwn ? 'bg-blue-500 text-white' : 'bg-gray-200'} rounded-lg px-4 py-2">
          <div class="text-sm ${isOwn ? 'text-blue-100' : 'text-gray-600'}">${msg.sender === currentUserId ? 'You' : msg.sender}</div>
          <div>${msg.text}</div>
          <div class="text-xs ${isOwn ? 'text-blue-100' : 'text-gray-500'} text-right">${new Date(msg.timestamp).toLocaleTimeString()}</div>
        </div>
      `;
      
      chatLog.appendChild(messageDiv);
    });
    chatLog.scrollTop = chatLog.scrollHeight;
  }

  async function sendMessage() {
    const text = messageInput.value.trim();
    if (!text || !selectedUserId) return;

    const message = {
      sender: currentUserId,
      receiver: selectedUserId,
      text: text,
      timestamp: new Date().toISOString()
    };

    try {
      await fetch('/api/chat/send', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(message)
      });

      const history = getChatHistory();
      const messages = history[selectedUserId] || [];
      messages.push(message);
      saveChatHistory(selectedUserId, messages);
      
      messageInput.value = '';
      loadChatHistory();
    } catch (error) {
      console.error('Error sending message:', error);
    }
  }

  async function checkNewMessages() {
    try {
      const response = await fetch(`/api/chat/messages/new?userId=${currentUserId}`);
      const newMessages = await response.json();
      
      newMessages.forEach(msg => {
        if (msg.sender !== selectedUserId) {
          unreadMessages.set(msg.sender, (unreadMessages.get(msg.sender) || 0) + 1);
          const userElement = Array.from(usersList.children)
            .find(el => el.querySelector('h3').textContent === msg.sender);
          
          if (userElement && !userElement.classList.contains('bg-blue-50')) {
            userElement.classList.add('bg-blue-50');
            userElement.querySelector('h3').classList.add('text-blue-600');
            const notificationDot = document.createElement('span');
            notificationDot.className = 'w-3 h-3 bg-blue-500 rounded-full notification-pulse';
            userElement.querySelector('.flex-1').appendChild(notificationDot);
          }
        } else {
          const history = getChatHistory();
          const messages = history[selectedUserId] || [];
          messages.push(msg);
          saveChatHistory(selectedUserId, messages);
          loadChatHistory();
        }
      });
    } catch (error) {
      console.error('Error checking new messages:', error);
    }
  }

  // Event listeners
  newChatBtn.addEventListener('click', () => {
    newChatForm.classList.toggle('hidden');
    if (!newChatForm.classList.contains('hidden')) {
      newUserIdInput.focus();
    }
  });

  startChatBtn.addEventListener('click', () => {
    const userId = newUserIdInput.value.trim();
    if (userId && userId !== currentUserId) {
      selectUser(userId, userId);
      newUserIdInput.value = '';
    }
  });

  sendButton.addEventListener('click', sendMessage);
  messageInput.addEventListener('keypress', (e) => {
    if (e.key === 'Enter') {
      sendMessage();
    }
  });

  // Initialize
  loadUsers();
  setInterval(loadUsers, 30000);
  messagePolling = setInterval(checkNewMessages, 1000);
</script>
