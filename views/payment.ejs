<%- contentFor('style') %>
<link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet" />
<style>
  .StripeElement {
    padding: 12px;
    border: 1px solid #e2e8f0;
    border-radius: 0.375rem;
    background: white;
    width: 100%;
  }
  .StripeElement--focus {
    border-color: #3b82f6;
  }
  .StripeElement--invalid {
    border-color: #ef4444;
  }
</style>

<div class="min-h-screen bg-gray-100 py-12">
  <div class="max-w-md mx-auto bg-white rounded-lg shadow-md overflow-hidden">
    <div class="px-6 py-8">
      <h1 class="text-2xl font-bold text-center mb-8">Payment Details</h1>
      
      <div class="space-y-6">
        <!-- Amount Selection -->
        <div>
          <label class="block text-sm font-medium text-gray-700 mb-2">Select Amount</label>
          <select id="amount" class="w-full p-3 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500">
            <option value="1000">$10.00</option>
            <option value="2000">$20.00</option>
            <option value="5000">$50.00</option>
            <option value="10000">$100.00</option>
          </select>
        </div>

        <!-- Card Element -->
        <div>
          <label class="block text-sm font-medium text-gray-700 mb-2">Card Details</label>
          <div id="card-element"></div>
          <div id="card-errors" class="text-red-500 text-sm mt-2"></div>
        </div>

        <!-- Submit Button -->
        <button id="submit-payment" class="w-full bg-blue-600 text-white py-3 px-4 rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 transition-colors">
          Pay Now
        </button>
      </div>
    </div>
  </div>

  <!-- Success Modal -->
  <div id="success-modal" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center hidden">
    <div class="bg-white p-8 rounded-lg shadow-xl max-w-md w-full mx-4">
      <div class="text-center">
        <svg class="mx-auto h-12 w-12 text-green-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
        </svg>
        <h2 class="text-2xl font-bold mt-4 mb-2">Payment Successful!</h2>
        <p class="text-gray-600 mb-6">Your payment has been processed successfully.</p>
        <button onclick="window.location.href='/'" class="bg-blue-600 text-white py-2 px-4 rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 transition-colors">
          Return to Dashboard
        </button>
      </div>
    </div>
  </div>
</div>

<%- contentFor('script') %>
<script src="https://js.stripe.com/v3/"></script>
<script>
  // Initialize Stripe
  const stripe = Stripe('<%= stripePublicKey %>');
  const elements = stripe.elements();

  // Create card element
  const card = elements.create('card');
  card.mount('#card-element');

  // Handle errors
  card.addEventListener('change', function(event) {
    const displayError = document.getElementById('card-errors');
    if (event.error) {
      displayError.textContent = event.error.message;
    } else {
      displayError.textContent = '';
    }
  });

  // Handle form submission
  const form = document.getElementById('submit-payment');
  form.addEventListener('click', async function(event) {
    event.preventDefault();
    form.disabled = true;
    
    const amount = document.getElementById('amount').value;
    
    try {
      // Create payment intent
      const response = await fetch('/api/payment/create-payment-intent', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          amount: parseInt(amount),
          currency: 'usd',
          userId: localStorage.getItem('userId') || 'anonymous'
        })
      });

      const data = await response.json();
      
      if (data.error) {
        throw new Error(data.error);
      }

      // Confirm payment
      const result = await stripe.confirmCardPayment(data.clientSecret, {
        payment_method: {
          card: card,
          billing_details: {
            name: 'Customer Name' // You might want to collect this from the user
          }
        }
      });

      if (result.error) {
        throw new Error(result.error.message);
      }

      // Payment successful
      await fetch('/api/payment/confirm-payment', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          paymentIntentId: result.paymentIntent.id,
          userId: localStorage.getItem('userId') || 'anonymous'
        })
      });

      // Show success modal
      document.getElementById('success-modal').classList.remove('hidden');

    } catch (error) {
      const errorElement = document.getElementById('card-errors');
      errorElement.textContent = error.message;
      form.disabled = false;
    }
  });
</script>
